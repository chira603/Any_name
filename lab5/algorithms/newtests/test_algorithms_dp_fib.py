# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.fib as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    bool_0 = True
    var_0 = module_0.fib_iter(bool_0)
    assert var_0 is True
    tuple_0 = module_0.fib_iter(bool_0)
    assert tuple_0 is True
    var_1 = module_0.fib_list(tuple_0)
    assert var_1 == 1
    var_2 = module_0.fib_recursive(bool_0)
    assert var_2 is True
    set_0 = {var_1}
    module_0.fib_list(set_0)


def test_case_1():
    int_0 = -4724
    with pytest.raises(AssertionError):
        module_0.fib_recursive(int_0)


def test_case_2():
    int_0 = -2726
    with pytest.raises(AssertionError):
        module_0.fib_list(int_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = True
    var_0 = module_0.fib_iter(bool_0)
    assert var_0 is True
    tuple_0 = (bool_0,)
    module_0.fib_list(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "calculate the inverse of a mod m\n        that is, find b such that (a * b) % m == 1"
    module_0.fib_iter(str_0)


def test_case_5():
    bool_0 = True
    var_0 = module_0.fib_iter(bool_0)
    assert var_0 is True
    var_1 = module_0.fib_recursive(var_0)
    assert var_1 is True
    float_0 = 768.75
    var_2 = module_0.fib_list(bool_0)
    assert var_2 == 1
    with pytest.raises(AssertionError):
        module_0.fib_recursive(float_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    int_0 = 524
    var_0 = module_0.fib_iter(int_0)
    assert (
        var_0
        == 14455678767661239941060750283349851372786616456634781515481577509301997444983826731071749118079998628070030493
    )
    var_1 = module_0.fib_list(int_0)
    assert (
        var_1
        == 14455678767661239941060750283349851372786616456634781515481577509301997444983826731071749118079998628070030493
    )
    var_2 = module_0.fib_list(int_0)
    assert (
        var_2
        == 14455678767661239941060750283349851372786616456634781515481577509301997444983826731071749118079998628070030493
    )
    var_3 = module_0.fib_iter(int_0)
    assert (
        var_3
        == 14455678767661239941060750283349851372786616456634781515481577509301997444983826731071749118079998628070030493
    )
    module_0.fib_recursive(var_3)


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    var_0 = module_0.fib_recursive(bool_0)
    assert var_0 is True
    var_1 = module_0.fib_list(var_0)
    assert var_1 == 1
    var_2 = module_0.fib_list(var_0)
    assert var_2 == 1
    float_0 = 1305.593845
    var_3 = module_0.fib_iter(var_0)
    assert var_3 is True
    var_4 = module_0.fib_list(bool_0)
    assert var_4 == 1
    var_5 = module_0.fib_iter(var_0)
    assert var_5 is True
    module_0.fib_iter(float_0)


def test_case_8():
    bool_0 = False
    var_0 = module_0.fib_recursive(bool_0)
    assert var_0 is False
    var_1 = module_0.fib_list(var_0)
    assert var_1 == 0
    var_2 = module_0.fib_list(var_1)
    assert var_2 == 0
    var_3 = module_0.fib_recursive(var_0)
    int_0 = -596
    with pytest.raises(AssertionError):
        module_0.fib_iter(int_0)
